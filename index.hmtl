<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestor de Proyectos - Carta Gantt</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Estilo para la barra de desplazamiento */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #f1f5f9;
        }
        ::-webkit-scrollbar-thumb {
            background: #94a3b8;
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #64748b;
        }
        .gantt-grid-container {
            position: relative;
            overflow-x: auto;
        }
        .gantt-task-bar {
            position: absolute;
            height: 2rem; /* 32px */
            border-radius: 0.25rem; /* rounded */
            display: flex;
            align-items: center;
            padding-left: 0.5rem;
            padding-right: 0.5rem;
            font-size: 0.75rem; /* text-xs */
            color: white;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1);
            transition: all 0.2s ease-in-out;
            cursor: pointer;
        }
        .gantt-task-bar:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
            z-index: 10;
        }
        .gantt-task-progress {
            position: absolute;
            left: 0;
            top: 0;
            height: 100%;
            border-radius: 0.25rem;
            background-color: rgba(255, 255, 255, 0.3);
            z-index: 1;
        }
         .gantt-task-bar span {
            position: relative;
            z-index: 2;
        }
        .gantt-phase-bar {
            position: absolute;
            height: 1.25rem; /* 20px */
            border-radius: 0.25rem;
            background-color: #475569;
            z-index: 5;
        }
        #edit-modal.hidden, #dashboard-view.hidden, #calendar-view.hidden, #no-project-view.hidden {
            display: none;
        }
        .view-btn {
            color: #475569; /* slate-600 */
            transition: all 0.2s ease-in-out;
        }
        .view-btn.active {
            background-color: white;
            box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            color: #0f172a; /* slate-900 */
        }
        #project-name-input {
            background: none;
            border: none;
            font-size: 1.875rem; /* text-3xl */
            font-weight: 700; /* bold */
            color: #1e293b; /* slate-800 */
            padding: 0.25rem;
            border-radius: 0.25rem;
        }
        #project-name-input:focus {
            outline: none;
            box-shadow: 0 0 0 2px #3b82f6; /* blue-600 */
            background-color: white;
        }
        .kpi-card {
            background-color: white;
            border-radius: 0.5rem;
            padding: 1.5rem;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1);
        }
        .day-column-non-working {
            background-color: #f1f5f9; /* slate-100 */
        }
        .grid-line-non-working {
            background-color: #f8fafc; /* slate-50 */
        }
        #gantt-connections {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            overflow: visible;
        }
    </style>
</head>
<body class="bg-slate-100 text-slate-800">

    <div class="container mx-auto p-4 md:p-6">
        <header class="mb-6 bg-white p-4 rounded-lg shadow-md">
            <div class="flex flex-wrap items-center justify-between gap-4">
                <div class="flex-grow">
                    <input type="text" id="project-name-input" class="text-2xl font-bold text-slate-800 bg-transparent p-1 w-full md:w-auto">
                </div>
                <div class="flex items-center gap-2">
                    <div class="relative">
                        <button id="project-menu-btn" class="bg-slate-200 text-slate-800 font-semibold py-2 px-4 rounded-md hover:bg-slate-300 transition flex items-center gap-2">
                            <span>Mis Proyectos</span>
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>
                        </button>
                        <div id="project-menu" class="hidden absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-50">
                            <div id="project-list" class="py-1" role="menu" aria-orientation="vertical" aria-labelledby="options-menu">
                                <!-- Project items will be injected here -->
                            </div>
                            <div class="border-t border-gray-100"></div>
                            <a href="#" id="new-project-btn" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" role="menuitem">Nuevo Proyecto...</a>
                        </div>
                    </div>
                     <button id="delete-project-btn" class="bg-red-100 text-red-700 font-semibold p-2 rounded-md hover:bg-red-200 transition" title="Eliminar Proyecto Actual">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-4v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                     </button>
                </div>
            </div>
        </header>

        <div id="main-content" class="grid md:grid-cols-12 gap-6">
            
            <!-- Panel de Controles -->
            <aside class="md:col-span-4 bg-white p-6 rounded-lg shadow-md self-start">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-semibold">Configuración</h2>
                     <div class="flex items-center space-x-2">
                        <label for="work-weekends-toggle" class="text-sm font-medium text-slate-700">Incluir fines de semana</label>
                        <div class="relative inline-block w-10 mr-2 align-middle select-none transition duration-200 ease-in">
                            <input type="checkbox" name="toggle" id="work-weekends-toggle" class="toggle-checkbox absolute block w-6 h-6 rounded-full bg-white border-4 appearance-none cursor-pointer"/>
                            <label for="work-weekends-toggle" class="toggle-label block overflow-hidden h-6 rounded-full bg-slate-300 cursor-pointer"></label>
                        </div>
                    </div>
                     <style>.toggle-checkbox:checked { right: 0; border-color: #3b82f6; } .toggle-checkbox:checked + .toggle-label { background-color: #3b82f6; }</style>
                </div>
                <!-- Añadir Tarea/Fase -->
                <div>
                    <h2 class="text-xl font-semibold mb-4 border-t pt-4">Añadir Elemento</h2>
                    <form id="add-task-form" class="space-y-4">
                        <div>
                            <label for="task-type" class="block text-sm font-medium text-slate-700">Tipo</label>
                            <select id="task-type" class="mt-1 block w-full rounded-md border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
                                <option value="task">Actividad</option>
                                <option value="phase">Fase</option>
                            </select>
                        </div>
                        <div>
                            <label for="task-name" class="block text-sm font-medium text-slate-700">Nombre</label>
                            <input type="text" id="task-name" required class="mt-1 block w-full rounded-md border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm" placeholder="Ej: Diseño de UI">
                        </div>
                        <div id="milestone-container">
                            <div class="flex items-center">
                                <input id="task-milestone" type="checkbox" class="h-4 w-4 rounded border-slate-300 text-blue-600 focus:ring-blue-500">
                                <label for="task-milestone" class="ml-2 block text-sm font-medium text-slate-700">Es un Hito</label>
                            </div>
                        </div>
                         <div id="predecessor-container">
                            <label for="task-predecessor" class="block text-sm font-medium text-slate-700">Predecesora</label>
                            <select id="task-predecessor" class="mt-1 block w-full rounded-md border-slate-300 shadow-sm"></select>
                        </div>
                        <div id="resource-container">
                            <label for="task-resource" class="block text-sm font-medium text-slate-700">Asignar Recurso</label>
                            <select id="task-resource" class="mt-1 block w-full rounded-md border-slate-300 shadow-sm"></select>
                        </div>
                        <div id="status-container">
                             <label for="task-status" class="block text-sm font-medium text-slate-700">Estado</label>
                            <select id="task-status" class="mt-1 block w-full rounded-md border-slate-300 shadow-sm">
                                <option>Pendiente</option>
                                <option>En Progreso</option>
                                <option>Completada</option>
                                <option>Atrasada</option>
                            </select>
                        </div>
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label for="task-start" class="block text-sm font-medium text-slate-700">Fecha de Inicio</label>
                                <input type="date" id="task-start" required class="mt-1 block w-full rounded-md border-slate-300 shadow-sm">
                            </div>
                             <div>
                                <label for="task-duration" class="block text-sm font-medium text-slate-700">Duración (días)</label>
                                <input type="number" id="task-duration" required class="mt-1 block w-full rounded-md border-slate-300 shadow-sm" min="1" value="1">
                            </div>
                        </div>
                        <div>
                            <label for="task-end" class="block text-sm font-medium text-slate-700">Fecha de Fin (calculada)</label>
                            <input type="date" id="task-end" required class="mt-1 block w-full rounded-md bg-slate-100 sm:text-sm" disabled>
                        </div>
                        <div id="progress-container">
                            <label for="task-progress" class="block text-sm font-medium text-slate-700">Grado de Avance: <span id="progress-value">0</span>%</label>
                            <input type="range" id="task-progress" min="0" max="100" value="0" class="mt-1 block w-full">
                        </div>
                        <button type="submit" class="w-full bg-blue-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition">
                            Añadir
                        </button>
                    </form>
                </div>
                <!-- Gestionar Recursos -->
                <div class="mt-8 pt-6 border-t border-slate-200">
                    <h2 class="text-xl font-semibold mb-4">Gestionar Recursos</h2>
                     <form id="add-resource-form" class="flex gap-2 mb-4">
                        <input type="text" id="resource-name" placeholder="Nombre" required class="block w-full rounded-md border-slate-300 shadow-sm sm:text-sm">
                        <input type="text" id="resource-role" placeholder="Rol" required class="block w-full rounded-md border-slate-300 shadow-sm sm:text-sm">
                        <button type="submit" class="bg-slate-600 text-white font-semibold p-2 rounded-md hover:bg-slate-700 transition">
                           <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
                        </button>
                    </form>
                    <div id="resource-list-container" class="space-y-2 max-h-48 overflow-y-auto"></div>
                </div>
                 <!-- Gestionar Líneas Base -->
                <div class="mt-8 pt-6 border-t border-slate-200">
                    <h2 class="text-xl font-semibold mb-4">Líneas Base</h2>
                    <div class="space-y-4">
                        <button id="save-baseline-btn" class="w-full bg-slate-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-slate-700 transition">
                            Guardar Línea Base Actual
                        </button>
                        <div>
                            <label for="baseline-select" class="block text-sm font-medium text-slate-700">Visualizar Línea Base</label>
                            <select id="baseline-select" class="mt-1 block w-full rounded-md border-slate-300 shadow-sm"></select>
                        </div>
                        <div id="baseline-list-container" class="space-y-2 max-h-48 overflow-y-auto"></div>
                    </div>
                </div>
            </aside>

            <!-- Área Principal de Vistas -->
            <div class="md:col-span-8">
                 <div class="mb-4">
                     <div id="main-view-switcher" class="flex items-center border-b border-slate-200">
                        <button data-view="gantt" class="main-view-btn font-semibold py-2 px-4 border-b-2 border-blue-600 text-blue-600">Gantt</button>
                        <button data-view="dashboard" class="main-view-btn font-semibold py-2 px-4 border-b-2 border-transparent text-slate-500">Dashboard</button>
                        <button data-view="calendar" class="main-view-btn font-semibold py-2 px-4 border-b-2 border-transparent text-slate-500">Calendario</button>
                    </div>
                 </div>

                <main id="gantt-view" class="bg-white rounded-lg shadow-md overflow-hidden">
                    <div class="flex justify-between items-center p-2 border-b border-slate-200">
                        <div class="flex items-center space-x-2 ml-2">
                            <label for="critical-path-toggle" class="text-sm font-medium text-slate-700">Ruta Crítica</label>
                            <div class="relative inline-block w-10 align-middle select-none transition duration-200 ease-in">
                                <input type="checkbox" name="toggle" id="critical-path-toggle" class="toggle-checkbox absolute block w-6 h-6 rounded-full bg-white border-4 appearance-none cursor-pointer"/>
                                <label for="critical-path-toggle" class="toggle-label block overflow-hidden h-6 rounded-full bg-slate-300 cursor-pointer"></label>
                            </div>
                        </div>
                        <div id="gantt-view-switcher" class="flex items-center bg-slate-200 rounded-md p-1 text-sm font-semibold">
                            <button data-view="day" class="view-btn active px-3 py-1 rounded-md">Día</button>
                            <button data-view="week" class="view-btn px-3 py-1 rounded-md">Semana</button>
                            <button data-view="month" class="view-btn px-3 py-1 rounded-md">Mes</button>
                            <button data-view="year" class="view-btn px-3 py-1 rounded-md">Año</button>
                        </div>
                    </div>
                    <div id="gantt-container" class="w-full h-[80vh] flex flex-col">
                        <div class="flex border-b border-slate-200 bg-slate-50 font-semibold text-sm sticky top-0 z-20">
                            <div class="w-1/3 p-3 border-r border-slate-200">Nombre de Tarea / Fase</div>
                            <div class="w-2/3 gantt-grid-container" id="gantt-header-timeline"></div>
                        </div>
                        <div class="flex-grow flex overflow-y-auto">
                            <div class="w-1/3 border-r border-slate-200" id="gantt-task-list"></div>
                            <div class="w-2/3 gantt-grid-container" id="gantt-chart-area"></div>
                        </div>
                    </div>
                </main>
                
                <main id="dashboard-view" class="hidden">
                    <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                        <div class="kpi-card xl:col-span-1 flex flex-col items-center justify-center">
                            <h3 class="text-lg font-semibold text-slate-800 mb-4">Progreso General</h3>
                            <div class="relative w-40 h-40">
                                <svg class="w-full h-full" viewBox="0 0 36 36">
                                    <path class="text-slate-200" stroke-width="4" fill="none" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
                                    <path id="kpi-progress-circle" class="text-blue-600 transition-all duration-500" stroke-width="4" fill="none" stroke-linecap="round" stroke-dasharray="0, 100" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
                                </svg>
                                <div id="kpi-progress-text" class="absolute inset-0 flex items-center justify-center text-3xl font-bold text-slate-800">0%</div>
                            </div>
                        </div>
                        <div class="kpi-card xl:col-span-2">
                             <h3 class="text-lg font-semibold text-slate-800 mb-4">Estado de Tareas</h3>
                             <div class="grid grid-cols-2 gap-4 text-center">
                                 <div><p id="kpi-tasks-completed" class="text-3xl font-bold text-green-600">0</p><p class="text-sm text-slate-500">Completadas</p></div>
                                 <div><p id="kpi-tasks-overdue" class="text-3xl font-bold text-red-600">0</p><p class="text-sm text-slate-500">Atrasadas</p></div>
                                 <div><p id="kpi-tasks-inprogress" class="text-3xl font-bold text-yellow-600">0</p><p class="text-sm text-slate-500">En Progreso</p></div>
                                 <div><p id="kpi-tasks-pending" class="text-3xl font-bold text-slate-600">0</p><p class="text-sm text-slate-500">Pendientes</p></div>
                             </div>
                        </div>
                        <div class="kpi-card xl:col-span-3 grid grid-cols-3 gap-4 text-center">
                            <div><p id="kpi-duration" class="text-2xl font-bold text-slate-800">0</p><p class="text-sm text-slate-500">Duración Total (días)</p></div>
                            <div><p id="kpi-days-remaining" class="text-2xl font-bold text-slate-800">0</p><p class="text-sm text-slate-500">Días Restantes</p></div>
                            <div><p id="kpi-end-date" class="text-2xl font-bold text-slate-800">-</p><p class="text-sm text-slate-500">Fecha de Fin</p></div>
                        </div>
                        <div class="kpi-card xl:col-span-3">
                             <h3 class="text-lg font-semibold text-slate-800 mb-4">Carga de Trabajo por Recurso</h3>
                             <div id="kpi-resource-workload" class="space-y-3"></div>
                        </div>
                    </div>
                </main>
                
                <main id="calendar-view" class="hidden bg-white rounded-lg shadow-md p-6">
                    <h2 class="text-2xl font-bold text-slate-900 mb-4">Gestionar Feriados</h2>
                    <form id="add-holiday-form" class="flex gap-2 mb-6 p-4 bg-slate-50 rounded-lg">
                        <input type="date" id="holiday-date" required class="block w-full rounded-md border-slate-300 shadow-sm sm:text-sm">
                        <input type="text" id="holiday-name" placeholder="Nombre del feriado" required class="block w-full rounded-md border-slate-300 shadow-sm sm:text-sm">
                        <button type="submit" class="bg-blue-600 text-white font-semibold p-2 rounded-md hover:bg-blue-700 transition">Añadir</button>
                    </form>
                    <div id="holiday-list-container" class="space-y-2 max-h-96 overflow-y-auto"></div>
                </main>
            </div>
        </div>

        <div id="no-project-view" class="hidden text-center py-20">
            <h2 class="text-3xl font-bold text-slate-700">Bienvenido a tu Gestor de Proyectos</h2>
            <p class="text-slate-500 mt-2 mb-6">Parece que no tienes ningún proyecto. ¡Crea uno para empezar!</p>
            <button id="create-first-project-btn" class="bg-blue-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-blue-700 transition text-lg">Crear Mi Primer Proyecto</button>
        </div>
    </div>
    
    <div id="edit-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white p-8 rounded-lg shadow-xl w-full max-w-md">
            <h2 class="text-2xl font-bold mb-6">Editar Elemento</h2>
            <form id="edit-task-form" class="space-y-4">
                <input type="hidden" id="edit-task-id">
                <div><label for="edit-task-type" class="block text-sm font-medium text-slate-700">Tipo</label><select id="edit-task-type" class="mt-1 block w-full rounded-md border-slate-300 shadow-sm"><option value="task">Actividad</option><option value="phase">Fase</option></select></div>
                <div><label for="edit-task-name" class="block text-sm font-medium text-slate-700">Nombre</label><input type="text" id="edit-task-name" required class="mt-1 block w-full rounded-md border-slate-300 shadow-sm"></div>
                <div id="edit-milestone-container">
                    <div class="flex items-center">
                        <input id="edit-task-milestone" type="checkbox" class="h-4 w-4 rounded border-slate-300 text-blue-600 focus:ring-blue-500">
                        <label for="edit-task-milestone" class="ml-2 block text-sm font-medium text-slate-700">Es un Hito</label>
                    </div>
                </div>
                 <div id="edit-predecessor-container">
                    <label for="edit-task-predecessor" class="block text-sm font-medium text-slate-700">Predecesora</label>
                    <select id="edit-task-predecessor" class="mt-1 block w-full rounded-md border-slate-300 shadow-sm"></select>
                </div>
                <div id="edit-resource-container"><label for="edit-task-resource" class="block text-sm font-medium text-slate-700">Recurso</label><select id="edit-task-resource" class="mt-1 block w-full rounded-md border-slate-300 shadow-sm"></select></div>
                <div id="edit-status-container"><label for="edit-task-status" class="block text-sm font-medium text-slate-700">Estado</label><select id="edit-task-status" class="mt-1 block w-full rounded-md border-slate-300 shadow-sm"><option>Pendiente</option><option>En Progreso</option><option>Completada</option><option>Atrasada</option></select></div>
                <div class="grid grid-cols-2 gap-4">
                    <div><label for="edit-task-start" class="block text-sm font-medium text-slate-700">Fecha de Inicio</label><input type="date" id="edit-task-start" required class="mt-1 block w-full rounded-md border-slate-300 shadow-sm"></div>
                    <div><label for="edit-task-duration" class="block text-sm font-medium text-slate-700">Duración (días)</label><input type="number" id="edit-task-duration" required class="mt-1 block w-full rounded-md border-slate-300 shadow-sm" min="1"></div>
                </div>
                <div><label for="edit-task-end" class="block text-sm font-medium text-slate-700">Fecha de Fin (calculada)</label><input type="date" id="edit-task-end" required class="mt-1 block w-full rounded-md bg-slate-100" disabled></div>
                <div id="edit-progress-container"><label for="edit-task-progress" class="block text-sm font-medium text-slate-700">Grado de Avance: <span id="edit-progress-value">0</span>%</label><input type="range" id="edit-task-progress" min="0" max="100" value="0" class="mt-1 block w-full"></div>
                <div class="flex justify-end gap-4 pt-4">
                    <button type="button" id="cancel-edit" class="bg-slate-200 text-slate-800 font-semibold py-2 px-4 rounded-md hover:bg-slate-300 transition">Cancelar</button>
                    <button type="submit" class="bg-blue-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-blue-700 transition">Guardar Cambios</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const STATUS_COLORS = { 'Pendiente': '#94a3b8', 'En Progreso': '#f59e0b', 'Completada': '#16a34a', 'Atrasada': '#dc2626', 'Fase': '#475569' };
            
            let projects = [];
            let activeProjectId = null;

            const VIEW_CONFIGS = { day: { unitWidth: 40 }, week: { unitWidth: 70 }, month: { unitWidth: 200 }, year: { unitWidth: 350 } };
            
            // DOM selectors
            const mainContent = document.getElementById('main-content');
            const noProjectView = document.getElementById('no-project-view');
            const createFirstProjectBtn = document.getElementById('create-first-project-btn');
            const projectNameInput = document.getElementById('project-name-input');
            const projectMenuBtn = document.getElementById('project-menu-btn');
            const projectMenu = document.getElementById('project-menu');
            const projectList = document.getElementById('project-list');
            const newProjectBtn = document.getElementById('new-project-btn');
            const deleteProjectBtn = document.getElementById('delete-project-btn');
            const mainViewSwitcher = document.getElementById('main-view-switcher');
            const ganttView = document.getElementById('gantt-view');
            const dashboardView = document.getElementById('dashboard-view');
            const calendarView = document.getElementById('calendar-view');
            const taskForm = document.getElementById('add-task-form');
            const ganttHeaderTimeline = document.getElementById('gantt-header-timeline');
            const ganttTaskList = document.getElementById('gantt-task-list');
            const ganttChartArea = document.getElementById('gantt-chart-area');
            const ganttViewSwitcher = document.getElementById('gantt-view-switcher');
            const editModal = document.getElementById('edit-modal');
            const editTaskForm = document.getElementById('edit-task-form');
            const cancelEditBtn = document.getElementById('cancel-edit');
            const workWeekendsToggle = document.getElementById('work-weekends-toggle');
            const addHolidayForm = document.getElementById('add-holiday-form');
            const holidayListContainer = document.getElementById('holiday-list-container');
            const saveBaselineBtn = document.getElementById('save-baseline-btn');
            const baselineSelect = document.getElementById('baseline-select');
            const baselineListContainer = document.getElementById('baseline-list-container');
            const criticalPathToggle = document.getElementById('critical-path-toggle');
            const addResourceForm = document.getElementById('add-resource-form');
            const resourceListContainer = document.getElementById('resource-list-container');

            // --- Project Management ---
            function getActiveProject() {
                if (!activeProjectId && projects.length > 0) {
                    activeProjectId = projects[0].id;
                }
                return projects.find(p => p.id === activeProjectId);
            }

            function createProject(name, isDefault = false) {
                const defaultResources = [ { id: 1, name: 'Jefe de Proyecto', role: 'Management' }, { id: 2, name: 'Analista', role: 'Análisis' }, { id: 3, name: 'Diseñador', role: 'Diseño' }, { id: 4, name: 'Desarrollador', role: 'Desarrollo' } ];
                const defaultTasks = isDefault ? [ { id: 1, name: 'Fase 1: Planificación', start: '2025-09-01', duration: 10, resourceId: 1, type: 'phase', progress: 100, status: null, predecessorId: null, isMilestone: false }, { id: 2, name: 'Definir Requisitos', start: '2025-09-02', duration: 4, resourceId: 2, type: 'task', progress: 100, status: 'Completada', predecessorId: null, isMilestone: false }, { id: 3, name: 'Kick-off Meeting', start: '2025-09-01', duration: 1, resourceId: 1, type: 'task', progress: 100, status: 'Completada', predecessorId: null, isMilestone: true }, { id: 4, name: 'Fase 2: Desarrollo', start: '2025-09-15', duration: 30, resourceId: 1, type: 'phase', progress: 0, status: null, predecessorId: null, isMilestone: false }, { id: 5, name: 'Desarrollo Backend', start: '2025-09-08', duration: 15, resourceId: 4, type: 'task', progress: 25, status: 'Atrasada', predecessorId: 2, isMilestone: false }, { id: 6, name: 'Desarrollo Frontend', start: '2025-09-22', duration: 20, resourceId: 4, type: 'task', progress: 0, status: 'Pendiente', predecessorId: 5, isMilestone: false }, { id: 7, name: 'Entrega Final', start: '2025-10-24', duration: 1, resourceId: 1, type: 'task', progress: 0, status: 'Pendiente', predecessorId: 6, isMilestone: true }, ] : [];
                const newProject = { id: Date.now(), name: name, tasks: defaultTasks, resources: defaultResources, holidays: [], baselines: [], workWeekends: false, showCriticalPath: false, selectedBaselineId: null, currentGanttView: 'day' };
                projects.push(newProject);
                activeProjectId = newProject.id;
            }

            // --- Date & Calculation Helpers ---
            const parseDate = (str) => new Date(str + 'T00:00:00Z');
            const formatDate = (date) => date.toISOString().split('T')[0];
            
            function isWorkingDay(date, project) {
                const day = date.getUTCDay();
                if (!project.workWeekends && (day === 6 || day === 0)) return false;
                if (project.holidays.some(h => h.date === formatDate(date))) return false;
                return true;
            }

            function getNextWorkingDay(dateStr, project) {
                let d = parseDate(dateStr);
                d.setUTCDate(d.getUTCDate() + 1);
                while (!isWorkingDay(d, project)) { d.setUTCDate(d.getUTCDate() + 1); }
                return d;
            }
            
            function getPreviousWorkingDay(date, project) {
                let d = new Date(date);
                d.setUTCDate(d.getUTCDate() - 1);
                while (!isWorkingDay(d, project)) { d.setUTCDate(d.getUTCDate() - 1); }
                return d;
            }

            function addBusinessDays(startDateStr, duration, project) {
                let currentDate = parseDate(startDateStr);
                while(!isWorkingDay(currentDate, project)){
                    currentDate.setUTCDate(currentDate.getUTCDate() + 1);
                }
                let daysAdded = 1;
                while (daysAdded < duration) {
                    currentDate.setUTCDate(currentDate.getUTCDate() + 1);
                    if (isWorkingDay(currentDate, project)) {
                        daysAdded++;
                    }
                }
                return currentDate;
            }

            function subtractBusinessDays(date, duration, project) {
                let currentDate = new Date(date);
                let daysSubtracted = 1;
                while(!isWorkingDay(currentDate, project)) {
                    currentDate.setUTCDate(currentDate.getUTCDate() - 1);
                }
                while (daysSubtracted < duration) {
                    currentDate.setUTCDate(currentDate.getUTCDate() - 1);
                    if (isWorkingDay(currentDate, project)) {
                        daysSubtracted++;
                    }
                }
                return currentDate;
            }
            
            function calculateProjectSchedule(project) {
                const taskMap = new Map(project.tasks.map(t => [t.id, t]));
                let changed = true;
                let iterations = 0;
                while(changed && iterations < project.tasks.length * project.tasks.length) {
                    changed = false;
                    project.tasks.forEach(task => {
                         if (task.isMilestone) task.duration = 1;
                        let newStartDate = task.start;
                        if(task.predecessorId && taskMap.has(task.predecessorId)){
                            const predecessor = taskMap.get(task.predecessorId);
                            if(predecessor.end) {
                                const potentialStartDate = formatDate(getNextWorkingDay(predecessor.end, project));
                                if (parseDate(potentialStartDate) > parseDate(newStartDate)) {
                                    newStartDate = potentialStartDate;
                                }
                            }
                        }
                        const newEndDate = formatDate(addBusinessDays(newStartDate, task.duration, project));
                        if(newStartDate !== task.start || newEndDate !== task.end) {
                            task.start = newStartDate;
                            task.end = newEndDate;
                            changed = true;
                        }
                    });
                    iterations++;
                }
            }

            function calculateCriticalPath(project) {
                if (project.tasks.length === 0) return;
                const taskMap = new Map();
                project.tasks.forEach(t => {
                    t.isCritical = false;
                    t.successors = [];
                    taskMap.set(t.id, t);
                });

                project.tasks.forEach(t => {
                    if (t.predecessorId && taskMap.has(t.predecessorId)) {
                        taskMap.get(t.predecessorId).successors.push(t);
                    }
                });

                project.tasks.forEach(t => {
                    t.es = parseDate(t.start);
                    t.ef = parseDate(t.end);
                });

                const projectEndDate = project.tasks.reduce((max, t) => (t.ef > max ? t.ef : max), new Date(0));
                const reversedTasks = [...project.tasks].sort((a, b) => b.ef.getTime() - a.ef.getTime());

                reversedTasks.forEach(task => {
                    if (task.successors.length === 0) {
                        task.lf = new Date(projectEndDate);
                    } else {
                        const minLsOfSuccessors = new Date(Math.min(...task.successors.map(s => s.ls.getTime())));
                        task.lf = getPreviousWorkingDay(minLsOfSuccessors, project);
                    }
                    task.ls = subtractBusinessDays(task.lf, task.duration, project);
                });

                project.tasks.forEach(task => {
                    const slack = (task.ls.getTime() - task.es.getTime()) / (1000 * 3600 * 24);
                    if (slack <= 0.1 && task.type === 'task') {
                        task.isCritical = true;
                    }
                });
            }

            // --- Render Functions ---
            function render() {
                const project = getActiveProject();
                
                if (!project) {
                    mainContent.classList.add('hidden');
                    noProjectView.classList.remove('hidden');
                    return;
                }
                mainContent.classList.remove('hidden');
                noProjectView.classList.add('hidden');
                
                calculateProjectSchedule(project);
                calculateCriticalPath(project);
                project.tasks.sort((a, b) => parseDate(a.start) - parseDate(b.start) || (a.isMilestone ? -1 : 1));
                
                renderProjectUI(project);
                renderControls(project);
                renderResourceList(project);
                populateResourceDropdowns(project);
                populatePredecessorDropdown(document.getElementById('task-predecessor'), project);
                renderHolidayList(project);
                renderBaselinesUI(project);
                renderGantt(project);
                renderDashboard(project);
            }

            function renderProjectUI(project) {
                projectNameInput.value = project.name;
                projectList.innerHTML = '';
                projects.forEach(p => {
                    const item = document.createElement('a');
                    item.href = '#';
                    item.dataset.id = p.id;
                    item.className = `block px-4 py-2 text-sm ${p.id === activeProjectId ? 'bg-blue-500 text-white' : 'text-gray-700 hover:bg-gray-100'}`;
                    item.textContent = p.name;
                    item.onclick = (e) => { e.preventDefault(); activeProjectId = p.id; projectMenu.classList.add('hidden'); render(); };
                    projectList.appendChild(item);
                });
            }

            function renderControls(project) {
                workWeekendsToggle.checked = project.workWeekends;
                criticalPathToggle.checked = project.showCriticalPath;
                document.querySelectorAll('#gantt-view-switcher .view-btn').forEach(btn => btn.classList.remove('active'));
                document.querySelector(`#gantt-view-switcher .view-btn[data-view="${project.currentGanttView}"]`).classList.add('active');
            }
            
            function renderBaselinesUI(project) {
                const currentVal = baselineSelect.value;
                baselineSelect.innerHTML = '<option value="">Ninguna</option>';
                baselineListContainer.innerHTML = '';
                project.baselines.forEach(b => {
                    baselineSelect.innerHTML += `<option value="${b.id}">${b.name}</option>`;
                    const el = document.createElement('div');
                    el.className = 'flex justify-between items-center bg-slate-100 p-2 rounded text-sm';
                    el.innerHTML = `<p class="font-medium">${b.name}</p><button data-id="${b.id}" class="delete-baseline-btn text-slate-400 hover:text-red-500 p-1 rounded-full"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-width="2" d="M3 6h18m-2 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6m3 0V4a2 2 0 012-2h4a2 2 0 012 2v2M10 11v6m4-6v6"/></svg></button>`;
                    baselineListContainer.appendChild(el);
                });
                baselineSelect.value = project.selectedBaselineId || '';
            }

            function renderGantt(project) {
                renderTaskList(project);
                 if (project.tasks.length === 0) {
                    ganttTaskList.innerHTML = '<p class="p-4 text-slate-500">No hay tareas.</p>';
                    ganttHeaderTimeline.innerHTML = '';
                    ganttChartArea.innerHTML = '';
                    return;
                }
                const projectStartDate = project.tasks.reduce((min, t) => (parseDate(t.start) < min ? parseDate(t.start) : min), parseDate(project.tasks[0].start));
                const projectEndDate = project.tasks.reduce((max, t) => (parseDate(t.end) > max ? parseDate(t.end) : max), parseDate(project.tasks[0].end));
                const { totalWidth, timelineStartDate, timelineEndDate } = renderTimeline(projectStartDate, projectEndDate, project);
                renderChart(timelineStartDate, timelineEndDate, totalWidth, project);
            }

            function renderTaskList(project) {
                const rowHeight = 64;
                ganttTaskList.innerHTML = '';
                 project.tasks.forEach(task => {
                    const resource = project.resources.find(r => r.id === task.resourceId);
                    const el = document.createElement('div');
                    el.className = `p-3 flex items-center justify-between border-b border-slate-200 text-sm ${task.type === 'phase' ? 'font-bold bg-slate-50' : ''}`;
                    el.style.height = `${rowHeight}px`;

                    const statusColor = task.type === 'phase' ? STATUS_COLORS.Fase : STATUS_COLORS[task.status];
                    const iconHtml = task.isMilestone
                        ? `<svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-yellow-500 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" /></svg>`
                        : `<span class="w-3 h-3 rounded-full flex-shrink-0" style="background-color: ${statusColor || '#64748b'}"></span>`;

                    const subtext = task.isMilestone
                        ? `<p class="text-xs text-slate-500 truncate pl-7">${formatDate(parseDate(task.start))}</p>`
                        : `<p class="text-xs text-slate-500 truncate pl-7">${resource ? resource.name : (task.type === 'task' ? 'Sin asignar' : '')} ${task.type === 'task' ? `(${task.progress}%)` : ''}</p>`;

                    el.innerHTML = `<div><div class="flex items-center gap-2">${iconHtml}<p class="truncate">${task.name}</p></div>${subtext}</div><div class="flex items-center gap-1"><button data-id="${task.id}" class="edit-btn text-slate-400 hover:text-blue-500 p-1 rounded-full"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg></button><button data-id="${task.id}" class="delete-btn text-slate-400 hover:text-red-500 p-1 rounded-full"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg></button></div>`;
                    ganttTaskList.appendChild(el);
                });
            }

            function renderTimeline(startDate, endDate, project) {
                ganttHeaderTimeline.innerHTML = '';
                const wrapper = document.createElement('div');
                wrapper.className = 'relative flex h-full';
                let totalWidth = 0;
                let timelineStartDate = new Date(startDate),
                    timelineEndDate = new Date(endDate);
                timelineStartDate.setUTCDate(timelineStartDate.getUTCDate() - 3); // Add padding
                timelineEndDate.setUTCDate(timelineEndDate.getUTCDate() + 3); // Add padding

                let currentDate = new Date(timelineStartDate);
                const unitWidth = VIEW_CONFIGS[project.currentGanttView].unitWidth;
                const topRow = document.createElement('div');
                topRow.className = 'absolute top-0 h-1/2 w-full flex';
                const bottomRow = document.createElement('div');
                bottomRow.className = 'absolute bottom-0 h-1/2 w-full flex border-t border-slate-200';
                let topLabelCache = {};

                function getWeekNumber(d) {
                    d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
                    d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7));
                    var yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
                    return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
                }

                while (currentDate <= timelineEndDate) {
                    let topLabelText = '',
                        bottomLabelText = '',
                        incrementDays = 1;
                    switch (project.currentGanttView) {
                        case 'day':
                            topLabelText = currentDate.toLocaleString('es-ES', { month: 'long', year: 'numeric', timeZone: 'UTC' });
                            bottomLabelText = currentDate.getUTCDate();
                            break;
                        case 'week':
                            topLabelText = currentDate.toLocaleString('es-ES', { month: 'long', year: 'numeric', timeZone: 'UTC' });
                            bottomLabelText = `S${getWeekNumber(currentDate)}`;
                            incrementDays = 7;
                            break;
                        case 'month':
                            topLabelText = currentDate.getUTCFullYear().toString();
                            bottomLabelText = currentDate.toLocaleString('es-ES', { month: 'short', timeZone: 'UTC' });
                            currentDate.setUTCMonth(currentDate.getUTCMonth() + 1);
                            incrementDays = 0;
                            break;
                        case 'year':
                            topLabelText = '';
                            bottomLabelText = currentDate.getUTCFullYear().toString();
                            currentDate.setUTCFullYear(currentDate.getUTCFullYear() + 1);
                            incrementDays = 0;
                            break;
                    }
                    if (topLabelText) {
                        if (!topLabelCache[topLabelText]) topLabelCache[topLabelText] = 0;
                        topLabelCache[topLabelText] += unitWidth;
                    }
                    const col = document.createElement('div');
                    col.className = 'flex-shrink-0 text-center border-r border-slate-200 text-xs flex items-center justify-center';
                    col.style.width = `${unitWidth}px`;
                    col.textContent = bottomLabelText;
                    if (project.currentGanttView === 'day' && !isWorkingDay(currentDate, project)) col.classList.add('day-column-non-working');
                    bottomRow.appendChild(col);
                    totalWidth += unitWidth;
                    if (incrementDays > 0) currentDate.setUTCDate(currentDate.getUTCDate() + incrementDays);
                }
                Object.keys(topLabelCache).forEach(key => {
                    const label = document.createElement('div');
                    label.className = 'h-full flex-shrink-0 text-center font-semibold text-slate-600 flex items-center justify-center border-r border-slate-200';
                    label.style.width = `${topLabelCache[key]}px`;
                    label.textContent = key.charAt(0).toUpperCase() + key.slice(1);
                    topRow.appendChild(label);
                });
                wrapper.style.width = `${totalWidth}px`;
                wrapper.appendChild(topRow);
                wrapper.appendChild(bottomRow);
                ganttHeaderTimeline.appendChild(wrapper);
                return { totalWidth, timelineStartDate, timelineEndDate };
            }

            function renderChart(timelineStart, timelineEnd, totalWidth, project) {
                ganttChartArea.innerHTML = '';
                const chartWrapper = document.createElement('div');
                chartWrapper.className = 'relative';
                const rowHeight = 64; // Increased row height for baseline
                chartWrapper.style.height = `${project.tasks.length * rowHeight}px`;
                chartWrapper.style.width = `${totalWidth}px`;
                const totalTimelineDays = (timelineEnd - timelineStart) / (1000 * 3600 * 24);
                const scale = totalWidth / totalTimelineDays;

                const baselineWrapper = document.createElement('div');
                baselineWrapper.className = 'absolute top-0 left-0 w-full h-full z-0';
                chartWrapper.appendChild(baselineWrapper);

                const activeBaseline = project.selectedBaselineId ? project.baselines.find(b => b.id === project.selectedBaselineId) : null;
                
                project.tasks.forEach((task, index) => {
                    if (activeBaseline) {
                        const baselineTask = activeBaseline.tasks.find(bt => bt.id === task.id);
                        if (baselineTask && !baselineTask.isMilestone && baselineTask.type !== 'phase') {
                            const baselineOffsetDays = (parseDate(baselineTask.start) - timelineStart) / (1000 * 3600 * 24);
                            const baselineDurationDays = (parseDate(baselineTask.end) - parseDate(baselineTask.start)) / (1000 * 3600 * 24) + 1;
                            const baselineBar = document.createElement('div');
                            baselineBar.className = 'absolute h-2 bg-slate-400 rounded-sm opacity-80';
                            baselineBar.style.top = `${index * rowHeight + 44}px`; // position below main bar
                            baselineBar.style.left = `${baselineOffsetDays * scale}px`;
                            baselineBar.style.width = `${baselineDurationDays * scale}px`;
                            baselineBar.title = `Línea Base: ${baselineTask.start} -> ${baselineTask.end}`;
                            baselineWrapper.appendChild(baselineBar);
                        }
                    }

                    const offsetDays = (parseDate(task.start) - timelineStart) / (1000 * 3600 * 24);
                    const barTopPosition = index * rowHeight;
                    if (task.isMilestone) {
                        const starContainer = document.createElement('div');
                        starContainer.dataset.taskId = task.id;
                        starContainer.className = 'absolute';
                        starContainer.style.left = `${offsetDays * scale}px`;
                        starContainer.style.top = `${barTopPosition + 16}px`;
                        starContainer.style.width = `${scale}px`;
                        starContainer.style.height = `32px`;
                        starContainer.innerHTML = `<div class="flex justify-center items-center h-full"><svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-yellow-500" viewBox="0 0 20 20" fill="currentColor"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" /></svg></div>`;
                        starContainer.title = `${task.name}\n(Hito en ${task.start})`;
                        chartWrapper.appendChild(starContainer);
                    } else {
                        const durationDays = (parseDate(task.end) - parseDate(task.start)) / (1000 * 3600 * 24) + 1;
                        const bar = document.createElement('div');
                        bar.dataset.taskId = task.id;
                         if (task.type === 'phase') {
                            bar.className = 'gantt-phase-bar';
                            bar.style.top = `${barTopPosition + 28}px`;
                        } else {
                            bar.className = 'gantt-task-bar';
                            bar.style.top = `${barTopPosition + 12}px`;
                            bar.style.backgroundColor = STATUS_COLORS[task.status] || '#64748b';
                            bar.innerHTML = `<div class="gantt-task-progress" style="width: ${task.progress}%"></div><span class="truncate">${task.name}</span>`;
                        }
                        bar.style.left = `${offsetDays * scale}px`;
                        bar.style.width = `${durationDays * scale}px`;
                         if (project.showCriticalPath && task.isCritical) {
                             bar.classList.add('ring-2', 'ring-offset-1', 'ring-red-500');
                        }
                        chartWrapper.appendChild(bar);
                    }
                });

                const svgNS = "http://www.w3.org/2000/svg";
                const svg = document.createElementNS(svgNS, 'svg');
                svg.setAttribute('id', 'gantt-connections');
                svg.innerHTML = `<defs><marker id="arrowhead" markerWidth="10" markerHeight="7" refX="0" refY="3.5" orient="auto"><polygon points="0 0, 10 3.5, 0 7" fill="#64748b" /></marker></defs>`;
                
                project.tasks.forEach((task) => {
                    if (task.predecessorId) {
                         const predecessorBar = chartWrapper.querySelector(`[data-task-id="${task.predecessorId}"]`);
                         const taskBar = chartWrapper.querySelector(`[data-task-id="${task.id}"]`);
                         
                         if (predecessorBar && taskBar) {
                            let x1 = predecessorBar.offsetLeft;
                            if (!project.tasks.find(t=>t.id === task.predecessorId).isMilestone) {
                                x1 += predecessorBar.offsetWidth
                            } else {
                                x1 += predecessorBar.offsetWidth / 2;
                            }

                            const y1 = predecessorBar.offsetTop + predecessorBar.offsetHeight / 2;
                            let x2 = taskBar.offsetLeft;
                            if (project.tasks.find(t=>t.id === task.id).isMilestone) {
                                x2 += taskBar.offsetWidth/2 - 10;
                            } else {
                                x2 -= 10;
                            }
                            const y2 = taskBar.offsetTop + taskBar.offsetHeight / 2;

                            const path = document.createElementNS(svgNS, 'path');
                            path.setAttribute('d', `M ${x1} ${y1} L ${x1 + 15} ${y1} L ${x1 + 15} ${y2} L ${x2} ${y2}`);
                            path.setAttribute('stroke', '#64748b');
                            path.setAttribute('stroke-width', '2');
                            path.setAttribute('fill', 'none');
                            path.setAttribute('marker-end', 'url(#arrowhead)');
                            svg.appendChild(path);
                         }
                    }
                });
                chartWrapper.appendChild(svg);
                ganttChartArea.appendChild(chartWrapper);
            }

            function renderResourceList(project) {
                resourceListContainer.innerHTML = '';
                project.resources.forEach(resource => {
                    const el = document.createElement('div');
                    el.className = 'flex justify-between items-center bg-slate-100 p-2 rounded text-sm';
                    el.innerHTML = `<div><p class="font-medium">${resource.name}</p><p class="text-xs text-slate-500">${resource.role}</p></div><button data-id="${resource.id}" class="delete-resource-btn text-slate-400 hover:text-red-500 p-1 rounded-full"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-width="2" d="M3 6h18m-2 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6m3 0V4a2 2 0 012-2h4a2 2 0 012 2v2M10 11v6m4-6v6"/></svg></button>`;
                    resourceListContainer.appendChild(el);
                });
            }

            function renderHolidayList(project) {
                holidayListContainer.innerHTML = '';
                project.holidays.forEach(h => {
                    const el = document.createElement('div');
                    el.className = 'flex justify-between items-center bg-slate-100 p-2 rounded text-sm';
                    el.innerHTML = `<div><p class="font-medium">${h.name}</p><p class="text-xs text-slate-500">${h.date}</p></div><button data-date="${h.date}" class="delete-holiday-btn text-slate-400 hover:text-red-500 p-1 rounded-full"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-width="2" d="M3 6h18m-2 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6m3 0V4a2 2 0 012-2h4a2 2 0 012 2v2M10 11v6m4-6v6"/></svg></button>`;
                    holidayListContainer.appendChild(el);
                });
            }

            function renderDashboard(project) {
                const tasks = project.tasks.filter(t => t.type === 'task' && !t.isMilestone);
                const totalTasks = tasks.length;
                if (totalTasks === 0) {
                     // Reset dashboard if no tasks
                    document.getElementById('kpi-progress-text').textContent = '0%';
                    document.getElementById('kpi-progress-circle').style.strokeDasharray = '0, 100';
                    ['completed', 'overdue', 'inprogress', 'pending'].forEach(s => document.getElementById(`kpi-tasks-${s}`).textContent = '0');
                     document.getElementById('kpi-duration').textContent = '0';
                    document.getElementById('kpi-days-remaining').textContent = '0';
                    document.getElementById('kpi-end-date').textContent = '-';
                    document.getElementById('kpi-resource-workload').innerHTML = '';
                    return;
                }

                const totalProgress = tasks.reduce((sum, task) => sum + task.progress, 0);
                const overallProgress = Math.round(totalProgress / totalTasks);
                document.getElementById('kpi-progress-text').textContent = `${overallProgress}%`;
                document.getElementById('kpi-progress-circle').style.strokeDasharray = `${overallProgress}, 100`;

                const taskStates = tasks.reduce((acc, task) => {
                    if (task.status === 'Completada') acc.completed++;
                    else if (task.status === 'Atrasada') acc.overdue++;
                    else if (task.status === 'En Progreso') acc.inprogress++;
                    else acc.pending++;
                    return acc;
                }, { completed: 0, overdue: 0, inprogress: 0, pending: 0 });

                document.getElementById('kpi-tasks-completed').textContent = taskStates.completed;
                document.getElementById('kpi-tasks-overdue').textContent = taskStates.overdue;
                document.getElementById('kpi-tasks-inprogress').textContent = taskStates.inprogress;
                document.getElementById('kpi-tasks-pending').textContent = taskStates.pending;

                const projectStartDate = new Date(Math.min(...project.tasks.map(t => parseDate(t.start))));
                const projectEndDate = new Date(Math.max(...project.tasks.map(t => parseDate(t.end))));
                const duration = Math.ceil((projectEndDate - projectStartDate) / (1000 * 3600 * 24));
                const daysRemaining = Math.ceil((projectEndDate - new Date()) / (1000 * 3600 * 24));
                
                document.getElementById('kpi-duration').textContent = duration;
                document.getElementById('kpi-days-remaining').textContent = daysRemaining > 0 ? daysRemaining : 0;
                document.getElementById('kpi-end-date').textContent = projectEndDate.toLocaleDateString();

                const workload = project.resources.map(res => ({
                    name: res.name,
                    count: project.tasks.filter(t => t.resourceId === res.id).length
                }));
                const workloadContainer = document.getElementById('kpi-resource-workload');
                workloadContainer.innerHTML = '';
                workload.forEach(w => {
                    workloadContainer.innerHTML += `<div class="flex justify-between items-center"><p>${w.name}</p><p class="font-bold">${w.count} tareas</p></div>`;
                });
            }

            function populateResourceDropdowns(project) {
                 const selects = [document.getElementById('task-resource'), document.getElementById('edit-task-resource')];
                 selects.forEach(select => {
                    const currentVal = select.value;
                    select.innerHTML = '<option value="">Sin asignar</option>';
                    project.resources.forEach(r => {
                        select.innerHTML += `<option value="${r.id}">${r.name}</option>`;
                    });
                    select.value = currentVal;
                 });
            }

            function populatePredecessorDropdown(select, project, currentTaskIdToExclude = null) {
                const currentVal = select.value;
                select.innerHTML = '<option value="">Ninguna</option>';
                project.tasks.filter(t => t.type === 'task' && t.id !== currentTaskIdToExclude).forEach(t => {
                    select.innerHTML += `<option value="${t.id}">${t.name}</option>`;
                });
                select.value = currentVal;
            }

            function openEditModal(taskId) {
                 const project = getActiveProject();
                 const task = project.tasks.find(t => t.id === taskId);
                 if (!task) return;
                 
                 const form = editTaskForm;
                 form.querySelector('#edit-task-id').value = task.id;
                 form.querySelector('#edit-task-type').value = task.type;
                 form.querySelector('#edit-task-name').value = task.name;
                 form.querySelector('#edit-task-milestone').checked = task.isMilestone;
                 form.querySelector('#edit-task-start').value = task.start;
                 form.querySelector('#edit-task-duration').value = task.duration;
                 
                 populatePredecessorDropdown(form.querySelector('#edit-task-predecessor'), project, task.id);
                 form.querySelector('#edit-task-predecessor').value = task.predecessorId || '';
                 form.querySelector('#edit-task-resource').value = task.resourceId || '';
                 form.querySelector('#edit-task-status').value = task.status || 'Pendiente';
                 form.querySelector('#edit-task-progress').value = task.progress || 0;
                 form.querySelector('#edit-progress-value').textContent = task.progress || 0;

                 updateEndDate(form.querySelector('#edit-task-start'), form.querySelector('#edit-task-duration'), form.querySelector('#edit-task-end'));
                 toggleTaskFields(form, task.type === 'task');
                 handleMilestoneToggle(form.querySelector('#edit-task-milestone'), form);
                
                 editModal.classList.remove('hidden');
            }

            function handleMilestoneToggle(checkbox, form) {
                const durationInput = form.querySelector('input[type="number"][id*="duration"]');
                const progressContainer = form.querySelector('[id*="progress-container"]');
                const statusContainer = form.querySelector('[id*="status-container"]');
                const resourceContainer = form.querySelector('[id*="resource-container"]');

                if (checkbox.checked) {
                    durationInput.value = 1;
                    durationInput.disabled = true;
                    if(progressContainer) progressContainer.style.display = 'none';
                    if(statusContainer) statusContainer.style.display = 'none';
                    if(resourceContainer) resourceContainer.style.display = 'none';
                } else {
                    durationInput.disabled = false;
                    if(progressContainer) progressContainer.style.display = 'block';
                    if(statusContainer) statusContainer.style.display = 'block';
                    if(resourceContainer) resourceContainer.style.display = 'block';
                }
            }

            function toggleTaskFields(form, isTask) {
                form.querySelector('[id*="status-container"]').style.display = isTask ? 'block' : 'none';
                form.querySelector('[id*="progress-container"]').style.display = isTask ? 'block' : 'none';
                form.querySelector('[id*="milestone-container"]').style.display = isTask ? 'block' : 'none';
                form.querySelector('[id*="predecessor-container"]').style.display = isTask ? 'block' : 'none';
            }

            function updateEndDate(startInput, durationInput, endInput) {
                const project = getActiveProject();
                if(!project || !startInput.value || !durationInput.value) return;
                const startDate = startInput.value;
                const duration = parseInt(durationInput.value);
                const endDate = addBusinessDays(startDate, duration, project);
                endInput.value = formatDate(endDate);
            }

            function setupFormListeners(form) {
                const startInput = form.querySelector('input[id*="start"]');
                const durationInput = form.querySelector('input[id*="duration"]');
                const endInput = form.querySelector('input[id*="end"]');
                const progressInput = form.querySelector('input[type="range"]');
                const progressValue = form.querySelector('span[id*="progress-value"]');
                const statusInput = form.querySelector('select[id*="status"]');
                
                startInput.onchange = () => updateEndDate(startInput, durationInput, endInput);
                durationInput.onchange = () => updateEndDate(startInput, durationInput, endInput);
                progressInput.oninput = () => {
                    progressValue.textContent = progressInput.value;
                    if(progressInput.value == 100) statusInput.value = 'Completada';
                    else if (progressInput.value > 0) statusInput.value = 'En Progreso';
                    else statusInput.value = 'Pendiente';
                };
                 statusInput.onchange = () => {
                    if(statusInput.value === 'Completada') {
                         progressInput.value = 100;
                    } else if (statusInput.value === 'Pendiente') {
                         progressInput.value = 0;
                    }
                    progressValue.textContent = progressInput.value;
                 };
            }
            
            // --- Event Listeners ---
            projectMenuBtn.addEventListener('click', () => projectMenu.classList.toggle('hidden'));
            document.addEventListener('click', (e) => { if (!projectMenuBtn.contains(e.target) && !projectMenu.contains(e.target)) { projectMenu.classList.add('hidden'); } });
            
            const handleNewProject = () => {
                const name = prompt('Nombre del nuevo proyecto:', 'Nuevo Proyecto');
                if (name) { createProject(name); render(); }
                 projectMenu.classList.add('hidden');
            };
            newProjectBtn.addEventListener('click', handleNewProject);
            createFirstProjectBtn.addEventListener('click', handleNewProject);
            
            deleteProjectBtn.addEventListener('click', () => {
                 const project = getActiveProject();
                 if (project && confirm(`¿Estás seguro de que quieres eliminar el proyecto "${project.name}"? Esta acción no se puede deshacer.`)) {
                    projects = projects.filter(p => p.id !== activeProjectId);
                    activeProjectId = projects.length > 0 ? projects[0].id : null;
                    render();
                }
            });
            
            projectNameInput.addEventListener('change', (e) => {
                const project = getActiveProject();
                if (project) { project.name = e.target.value; renderProjectUI(project); }
            });

            workWeekendsToggle.addEventListener('change', (e) => {
                const project = getActiveProject(); if(project) { project.workWeekends = e.target.checked; render(); }
            });

            criticalPathToggle.addEventListener('change', (e) => {
                const project = getActiveProject(); if(project) { project.showCriticalPath = e.target.checked; render(); }
            });

            saveBaselineBtn.addEventListener('click', () => {
                const project = getActiveProject(); if(!project) return;
                const name = prompt("Nombre para la nueva Línea Base:", `Línea Base - ${new Date().toLocaleDateString()}`);
                if (name) {
                    project.baselines.push({ id: Date.now(), name: name, tasks: JSON.parse(JSON.stringify(project.tasks)) });
                    render();
                }
            });

            // Baseline selection - handled in event-listeners.js
            // baselineSelect.addEventListener('change', (e) => {
            //     const project = getActiveProject(); if(project) { project.selectedBaselineId = e.target.value ? parseInt(e.target.value) : null; render(); }
            // });

            // Baseline deletion - handled in event-listeners.js  
            // baselineListContainer.addEventListener('click', (e) => {
            //     const btn = e.target.closest('.delete-baseline-btn');
            //     const project = getActiveProject();
            //     if (btn && project) {
            //         project.baselines = project.baselines.filter(b => b.id !== parseInt(btn.dataset.id));
            //         if (project.selectedBaselineId === parseInt(btn.dataset.id)) {
            //             project.selectedBaselineId = null;
            //         }
            //         render();
            //     }
            // });

            addResourceForm.addEventListener('submit', e => {
                e.preventDefault();
                const project = getActiveProject();
                if(!project) return;
                project.resources.push({
                    id: Date.now(),
                    name: document.getElementById('resource-name').value,
                    role: document.getElementById('resource-role').value
                });
                addResourceForm.reset();
                render();
            });

            resourceListContainer.addEventListener('click', e => {
                 const btn = e.target.closest('.delete-resource-btn');
                 const project = getActiveProject();
                 if(btn && project) {
                    project.resources = project.resources.filter(r => r.id !== parseInt(btn.dataset.id));
                    render();
                 }
            });

            addHolidayForm.addEventListener('submit', e => {
                 e.preventDefault();
                 const project = getActiveProject();
                 if(!project) return;
                 project.holidays.push({
                    date: document.getElementById('holiday-date').value,
                    name: document.getElementById('holiday-name').value
                 });
                 addHolidayForm.reset();
                 render();
            });

            holidayListContainer.addEventListener('click', e => {
                const btn = e.target.closest('.delete-holiday-btn');
                const project = getActiveProject();
                if(btn && project) {
                    project.holidays = project.holidays.filter(h => h.date !== btn.dataset.date);
                    render();
                }
            });
            
            setupFormListeners(taskForm);
            setupFormListeners(editTaskForm);

            taskForm.addEventListener('submit', e => {
                e.preventDefault();
                const project = getActiveProject();
                if(!project) return;
                const type = document.getElementById('task-type').value;
                const isMilestone = type === 'task' ? document.getElementById('task-milestone').checked : false;
                project.tasks.push({
                    id: Date.now(),
                    name: document.getElementById('task-name').value,
                    resourceId: isMilestone ? null : (parseInt(document.getElementById('task-resource').value) || null),
                    predecessorId: isMilestone ? null : (type === 'task' ? (parseInt(document.getElementById('task-predecessor').value) || null) : null),
                    start: document.getElementById('task-start').value,
                    duration: parseInt(document.getElementById('task-duration').value),
                    end: document.getElementById('task-end').value,
                    type: type,
                    status: isMilestone ? 'Completada' : (type === 'task' ? document.getElementById('task-status').value : null),
                    progress: isMilestone ? 100 : (type === 'task' ? parseInt(document.getElementById('task-progress').value) : 100),
                    isMilestone: isMilestone,
                });
                taskForm.reset();
                render();
            });

            editTaskForm.addEventListener('submit', e => {
                e.preventDefault();
                const project = getActiveProject();
                if(!project) return;
                const id = parseInt(document.getElementById('edit-task-id').value);
                const taskIndex = project.tasks.findIndex(t => t.id === id);
                if (taskIndex === -1) return;
                
                const type = document.getElementById('edit-task-type').value;
                const isMilestone = type === 'task' ? document.getElementById('edit-task-milestone').checked : false;

                project.tasks[taskIndex] = {
                    ...project.tasks[taskIndex],
                    name: document.getElementById('edit-task-name').value,
                    resourceId: isMilestone ? null : (parseInt(document.getElementById('edit-task-resource').value) || null),
                    predecessorId: isMilestone ? null : (type === 'task' ? (parseInt(document.getElementById('edit-task-predecessor').value) || null) : null),
                    start: document.getElementById('edit-task-start').value,
                    duration: parseInt(document.getElementById('edit-task-duration').value),
                    end: document.getElementById('edit-task-end').value,
                    type: type,
                    status: isMilestone ? 'Completada' : (type === 'task' ? document.getElementById('edit-task-status').value : null),
                    progress: isMilestone ? 100 : (type === 'task' ? parseInt(document.getElementById('edit-task-progress').value) : 100),
                    isMilestone: isMilestone,
                };
                editModal.classList.add('hidden');
                render();
            });

            ganttTaskList.addEventListener('click', (e) => {
                 const project = getActiveProject();
                 if(!project) return;
                 const editBtn = e.target.closest('.edit-btn');
                 const deleteBtn = e.target.closest('.delete-btn');
                 if(editBtn) {
                    openEditModal(parseInt(editBtn.dataset.id));
                 }
                 if(deleteBtn) {
                     if(confirm('¿Estás seguro de que quieres eliminar esta tarea?')) {
                        project.tasks = project.tasks.filter(t => t.id !== parseInt(deleteBtn.dataset.id));
                        render();
                     }
                 }
            });
            
            cancelEditBtn.addEventListener('click', () => editModal.classList.add('hidden'));

            ganttViewSwitcher.addEventListener('click', e => {
                const btn = e.target.closest('.view-btn');
                const project = getActiveProject();
                if(btn && project) {
                    project.currentGanttView = btn.dataset.view;
                    render();
                }
            });

            mainViewSwitcher.addEventListener('click', e => {
                const btn = e.target.closest('.main-view-btn');
                if(btn) {
                    document.querySelectorAll('.main-view-btn').forEach(b => {
                        b.classList.remove('border-blue-600', 'text-blue-600');
                        b.classList.add('border-transparent', 'text-slate-500');
                    });
                     btn.classList.add('border-blue-600', 'text-blue-600');
                     btn.classList.remove('border-transparent', 'text-slate-500');

                     ganttView.classList.add('hidden');
                     dashboardView.classList.add('hidden');
                     calendarView.classList.add('hidden');
                     document.getElementById(`${btn.dataset.view}-view`).classList.remove('hidden');
                }
            });
            
            // --- Initialization ---
            if (projects.length === 0) {
                createProject('Proyecto Demo', true);
            }
            activeProjectId = projects[0].id;
            render();
        });
    </script>
</body>
</html>